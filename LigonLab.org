  *LigonLab*: Toolbox for working with/like Ethan Ligon

* Introduction
  :PROPERTIES:
  :EXPORT_FILE_NAME: README
  :EXPORT_TITLE: LigonLab: Toolbox for working with/like Ethan Ligon
  :END:
This project is meant to both document and help set up a software
environment which will allow you to use tools employed by Ethan Ligon
(that's me) and various of his students and colleagues.  If you want
to be able to work with me you may find this toolbox useful.  However,
you don't have to have a relationship with me to use this
package---you may find it independently useful, or useful as a first
step in replicating work done by others who have used this package.

*Nota Bene*: I think any of the code/setup in this toolbox should work on a wide
variety of computers running =linux= or =macOS=.  If you're on a MS
Windows machine you're not definitely not working with/like Ethan
Ligon, and much of what follows may need to be changed or adapted if
it's to work at all.

** Getting Started
   Fork this repository on =github=, and then follow instructions in
   =LigonLab.org:Basic Setup= to install =git=, =emacs=, and
   =Anaconda=, if these aren't already installed.

* Basic Setup
** Git

 This toolbox comes most naturally in the form of a =git= repository,
 available on-line at https://github.com/ligon/LigonLab/.  If you don't
 already have a =git= client installed on your machine, please follow
 the instructions at
 https://git-scm.com/book/en/v2/Getting-Started-Installing-Git. 

 I'll assume going forward that you've installed =git=, and are capable
 of opening and functioning in a terminal.  With these two
 prerequisites satisfied, fork the git repository for LigonLab.
 Note that you *could* clone LigonLab directly from the =url= above, but our
 collective workflow instead is modeled on you working with a "fork".
 See the discussion at https://help.github.com/articles/fork-a-repo/
 if this idea is unfamiliar.
 
 I'll assume going forward that you've:
   1. Installed =git=; 
   2. Are capable of opening and functioning in a terminal;
   3. Have a =github= account; supply your user name (replace "ligon") below
      #+name: githubuser
      | Your github user id: | ligon |
   4. And have "forked" LigonLab on github.

 With these prerequisites satisfied, at the command line you can check out the git
 repository for LigonLab by executing:

 #+begin_src bash :export code :var GITHUBUSER=githubuser[0,1]
 cd $HOME
 git clone https://github.com/$GITHUBUSER/LigonLab.git
 #+end_src

 This should install the repository (containing this file!) from your
 forked version of LigonLab under your home directory.  

*** TODO Basic Git Use

** Emacs
  This document is written in =org-mode= format, a plaintext markup
  language designed to work well with =emacs=.  If you don't have
  =emacs= installed on your machine, you'll need it!  Some possible
  sources (definitely not comprehensive):

  - =Ubuntu/Linux= :: Execute from a shell:
    #+begin_src bash :exports code
    sudo apt update 
    sudo apt install emacs
    #+end_src

  - =macOS= :: Download and run the installer from
               https://emacsformacosx.com/.
               Note that =macOS= also comes with a version of =emacs=
               installed that can (only?) be run in a terminal.  This
               latter is probably not what you want.
	       
** Python
   =Python= is my go-to programming language for a wide variety of
   projects.  Much of my code leans heavily on packages designed for
   various numerical applications.  Many of these, in turn, are
   included in the easily-installed =Anaconda=, which can be obtained
   from https://www.anaconda.com/download/.  I recommend 
   =Anaconda= because it greatly simplifies package management for
   =python= (which often relies on many different packages, with
   different dependencies).

   Toward the end of the =Anaconda= installation process, the
   installation script may ask you if you want the =Ananconda=
   directory added to your search path.  Say "Yes"!

* Getting Started
  You've got the various bits of software described above installed.
  Time to use them!
** Basic =emacs= navigation
   From within =emacs=, try either typing "C-h t" to start a basic
   =emacs= tutorial.


** Hello world!
   Our goal here is simply to run a simple "Hello world!" program, but
   to do it from =emacs/orgmode=.  And since we're in the East Bay
   we'll modify it appropriately.
 
   Before we start, we need to tell =emacs= it's okay to execute
   various kinds of programs.  Here put a "t" as the argument for any
   language you think you might want to execute.  Both =emacs-lisp=
   and =python= should remain set, and also =shell= for good measure.
   The others are optional.

   Go ahead and execute this code block by putting your cursor inside
   the block and pressing "C-c C-c".

#+begin_src emacs-lisp :tangle yes
  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote ((emacs-lisp . t)
           (python . t)
           (shell . t)
           (org . t)
           (dot . nil)
           (ditaa . nil)
           (R . nil)
           (ipython . nil)
           (octave . nil)
           (gnuplot . nil)
           (ledger . nil)
           (asymptote . nil)
           (latex . nil))))
#+end_src

   You'll probably want to execute the following 
#+begin_src emacs-lisp :tangle yes
  ; Do not prompt to confirm evaluation
  ; This may be dangerous - make sure you understand the consequences
  ; of setting this -- see the docstring for details
  (setq org-confirm-babel-evaluate nil)
#+end_src

Now, with that language setup out of the way, do the same "C-c C-c" trick on the =hello= code block immediately below.

#+name: hello  
#+begin_src python :results output  
print("Hell%c world!" % 'a')
#+end_src

Success should like a line reading "#+RESULTS: hello" and a greeting.

** Importing =python= modules from Anaconda
   If you've installed =anaconda= as directed above, then on your
   computer you'll have available several related things, including
    - A =python= interpreter.  Test by executing (C-c C-c) the
      following code block---You should receive a greeting in
      response, preceded by an indication of what python binary is
      being called.  NB: *This path should include the string "anaconda"!*
      #+begin_src bash :results output
      echo "python called from `which python`."
      python -c"print('Hella world')"
      #+end_src

      #+results:
      : python called from /home/ligon/anaconda3/bin/python
      : Hella world

    - An interactive python shell called =ipython=.  Invoke this from
      the command line for a convenient way to use python.

    - A collection of packages and modules useful for research
      computing.  A leading example is the =pandas= package.  Execute
      the following to make sure this works:
      #+begin_src python :results output
      import pandas as pd
      print(pd.__file__)      
      #+end_src

      #+results:
      : /home/ligon/anaconda3/lib/python3.6/site-packages/pandas/__init__.py

      *Once again this path should include the string "anaconda".*
